/*
 * ALMA - Atacama Large Millimiter Array
 * (c) European Southern Observatory, 2002
 * (c) Associated Universities Inc., 2002
 * Copyright by AUI (in the framework of the ALMA collaboration),
 * All rights reserved
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307  USA
 * 
 * File MessageQueue.java
 * 
 */

package alma.scheduling.MasterScheduler;

import java.util.Vector;

/**
 * A collection of all the replies generated by given threads
 * 
 * @author Sohaila Lucero
 */
public class MessageQueue {
    private Vector queue;

    public MessageQueue() {
        queue = new Vector();
        System.out.println("SCHEDULING: Message queue created");
    }

    public synchronized void addMessage(String messageId, Thread timer) {
        Message m = new Message(messageId, timer);
        queue.add(m);
    }
    public synchronized void addMessage(Message m) throws Exception {
        if(m.getMessageId() == null) {
            throw new Exception("Cannot add a message that has no id!");
        }
        queue.add(m);
    }

    public synchronized Message getMessage(String messageId) {
        Message message = null;
        for(int i=0; i<queue.size(); i++) {
            if( ((Message)queue.elementAt(i)).getMessageId().equals(messageId) ) {
                message = (Message)queue.elementAt(i);
                break;
            }
        }
        return message;
    }

    public synchronized void removeMessage(String messageId) {
        for(int i=0; i<queue.size(); i++) {
            if( ((Message)queue.elementAt(i)).getMessageId().equals(messageId) ) {
                Thread tmp = ((Message)queue.elementAt(i)).getTimer();
                tmp = null;
                queue.remove(i);
                break;
            }
        }
    }

    public synchronized int size() {
        return queue.size();
    }
}
