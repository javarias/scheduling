/*
 *    ALMA - Atacama Large Millimiter Array
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration),
 *    All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 *    MA 02111-1307  USA
 */
#pragma prefix "alma"

#include <xmlentity.idl> 

module scheduling {

	typedef xmlentity::XmlEntityStruct SchedBlock;
	typedef xmlentity::XmlEntityStruct SchedulingInfo;
	typedef xmlentity::XmlEntityStruct SchedulingPolicy;
	
	typedef string EntityId;
	typedef sequence<EntityId> EntityIdSeq;
	typedef string Time;
	typedef short AntennaId;
	typedef short SubarrayId;
	typedef sequence<short> AntennaIdSeq;

	// Request is invalid for current mode and state.
	exception InvalidOperation { 
		string operation;
		string error;
	};
	// A response was received that contained an unidentifiable message
	// identifier.
	exception UnidentifiedResponse { 
		string messageId;
		string reply;
		string error;
	};
	// One or more objects are not valid.
	exception InvalidObject { 
		EntityId objectId;
		string error;
	};
	// The SB already exists.
	exception SBExists { 
		EntityId sbId;
		string error;
	};
	// There is no such SB.
	exception NoSuchSB { 
		EntityId sbId;
		string error;
	};


	// This interface is implemented in the scheduling MasterScheduler and 
	// can only be used by the Executive subsystem.
	//
	// The scheduling subsystem implements the component lifecycle 
	// interface which is defined in ACS.  The execute method in this 
	// interface starts only the MasterScheduler and the ProjectManager.
	// It does not cause scheduling to begin.  The executive must execute 
	// the startScheduling method in order for scheduling to begin.  
	// Scheduling policies can be changed by stopping all dynamic 
	// scheduling and restarting it with a different scheduling policy.
	//
	// ICD 3.1 Start/stop scheduling and get information.  Used by the Executive subsystem.
	interface Executive_to_Scheduling {

		// Begin scheduling with the specified scheduling policy.
		void startScheduling (in SchedulingPolicy schedulingPolicy) raises (InvalidOperation);
	
		// Stop all scheduling.
		void stopScheduling () raises (InvalidOperation);
	
		// Is the scheduling subsystem functioning?
		boolean getStatus ();
	
		// Get current information about the scheduling subsystem.
		SchedulingInfo getSchedulingInfo();
	};


	// This interface is used by the PI when a project is in interactive mode.  
	// The PI is implemented in the Executive subsystem and communicates with 
	// the project manager in the scheduling subsystem.
	// This interface can only be used by a PI in interactive mode.
	//
	// ICD 3.3 PI (in interactive mode) to Scheduling
	interface Interactive_PI_to_Scheduling {

		// Start this interactive session.
		//	piId		the identifier of the PI involved in this 
		//			session
		void startSession(in EntityId piId) raises (InvalidOperation, InvalidObject);	

		// Get the list of scheduling blocks belonging to this 
		// interactive session.
		// Returns the list of scheduling ids as a sequence of EntityIds.
		EntityIdSeq getSBList ( ) raises (InvalidOperation);

		// Add a scheduling block to this session's list.
		//	sb		the scheduling block to be added
		void add (in SchedBlock sb) raises (InvalidOperation, InvalidObject, SBExists);

		// Delete a scheduling block from this session's list.
		//	sbId		the identifier of the scheduling block to be
		//				deleted
		void delete (in EntityId sbId) raises (InvalidOperation, NoSuchSB);

		// Update a scheduling block in this session's list.
		//	sb		the identifier of the scheduling block to be 
		//			updated
		void update (in SchedBlock sb) raises (InvalidOperation, InvalidObject, NoSuchSB);

		// Execute a scheduling block.
		//	sbId		the identifier of the scheduling block to be 
		//				executed
		//	when		the time at which the scheduling block is to be 
		//				executed
		void execute (in EntityId sbId, in Time when) raises (InvalidOperation, NoSuchSB);

		// Stop the currently executing scheduling block.
		void stopSB ( ) raises (InvalidOperation);

		// End this interactive session.
		void endSession ( ) raises (InvalidOperation);
	};


	// This interface is used by the telescope operator as implemented in the
	// Executive subsystem and communicates with the master scheduler and 
	// schedulers in the scheduling subsystem.
	//
	// ICD 3.5 telescope operator to Scheduling
	interface TelescopeOperator_to_Scheduling {

		// Reply to a message from Master Scheduler.
		//	messageId	the identifier of the message being replied to
		//	reply		the reply to the previous message
		void response (in string messageId, in string reply) raises (UnidentifiedResponse); 

		// Get information about existing sub-arrays.
		SchedulingInfo getSubarrayInfo();

		// Create a sub-array.
		//	antennaIdList	the list of antenna ids to be included in 
		//					the sub-array
		//	schedulingMode 	either: manual, dynamic, or interactive
		// Returns the identifier of the sub-array as a short.
		SubarrayId createSubarray (in AntennaIdSeq antennaIdList, in string schedulingMode) raises (InvalidOperation); 

		// De-allocate a sub-array.
		//	subarrayId	the identifier of the sub-array to be de-allocated
		void destroySubarray (in SubarrayId subarrayId) raises (InvalidOperation);

		// Execute a project on a particular sub-array
		//	projectId	the identifier of the project to be executed
		//	subarrayId	the sub-array on which the project is to 
		//				be executed
		void executeProject (in EntityId projectId, in SubarrayId subarrayId) raises (InvalidOperation);

		// Execute a scheduling block on a particular sub-array.
		//	sbId		the identifier of the scheduling block to be 
		//				executed
		//	subarrayId	the sub-array on which the SB is to be executed
		//	when		the time at which the scheduling block is to be
		//			executed
		void executeSB (in EntityId sbId, in SubarrayId subarrayId, in Time when);

		// Stop a scheduling block.
		//	sbId		the identifier of the scheduling block to be 
		//				stopped
		void stopSB (in EntityId sbId) raises (InvalidOperation, NoSuchSB);

		// Pause all active scheduling on a particular sub-array.
		//	subarrayId	the sub-array on which scheduling is to be stopped
		void pauseScheduling (in SubarrayId subarrayId) raises (InvalidOperation);

		// Resume active scheduling on a particular sub-array.
		//	subarrayId	the sub-array on which scheduling is to be resumed
		void resumeScheduling (in SubarrayId subarrayId) raises (InvalidOperation);

		// Place an antenna in manual mode.
		//	antennaId	the antenna id that is to be placed in manual mode
		void manualMode (in AntennaId antennaId) raises (InvalidOperation);

		// Make an antenna available for active mode.
		//	antennaId	the antenna id that is available for active mode
		void activeMode (in AntennaId antennaId) raises (InvalidOperation);
	};

	// ICD 5.1 Published when nothing can be scheduled under current conditions.
	struct NothingCanBeScheduledEvent {
		string reason;
	};


};
