<?xml version="1.0" encoding="UTF-8"?>
<!-- ALMA - Atacama Large Millimeter Array Copyright (c) AUI - Associated 
	Universities Inc., 2011 (in the framework of the ALMA collaboration). All 
	rights reserved. This library is free software; you can redistribute it and/or 
	modify it under the terms of the GNU Lesser General Public License as published 
	by the Free Software Foundation; either version 2.1 of the License, or (at 
	your option) any later version. This library is distributed in the hope that 
	it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
	of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser 
	General Public License for more details. You should have received a copy 
	of the GNU Lesser General Public License along with this library; if not, 
	write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
	Boston, MA 02111-1307 USA -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true" default-autowire="byName">

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="user" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="initialPoolSize" value="5" />
		<property name="maxPoolSize" value="100" />
		<property name="minPoolSize" value="5" />
		<property name="acquireIncrement" value="1" />
		<property name="acquireRetryAttempts" value="5" />
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingResources">
			<list>
				<value>alma/scheduling/datamodel/executive/Executive.hbm.xml</value>
				<value>alma/scheduling/datamodel/obsproject/ObsProject.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/obsproject/ObsUnit.hbm.xml</value>
				<value>alma/scheduling/datamodel/obsproject/ObservingParameters.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/obsproject/FieldSource.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/obsproject/Target.hbm.xml</value>
				<value>alma/scheduling/datamodel/weather/WeatherHistRecord.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/weather/AtmParameters.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/output/Output.hbm.xml</value>
				<value>alma/scheduling/datamodel/config/Configuration.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/observatory/TelescopeEquipment.hbm.xml
				</value>
				<value>alma/scheduling/datamodel/observation/Observation.hbm.xml
				</value>

			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!--<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop> -->
				<!--<prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.transaction.flush_before_completion">true</prop>
				<prop key="hibernate.transaction.auto_close_session">false</prop>
				<prop key="hibernate.max_fetch_depth">5</prop>
				<prop key="hibernate.default_batch_fetch_size">16</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<prop key="hibernate.jdbc.fetch_size">8</prop>
			</props>
		</property>
	</bean>

	<!-- enable transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- The transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- DAO Beans -->
	<bean id="execDao"
		class="alma.scheduling.datamodel.executive.dao.ExecutiveDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="outDao" class="alma.scheduling.datamodel.output.dao.OutputDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="sbDao"
		class="alma.scheduling.datamodel.obsproject.dao.SchedBlockDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="weatherStationDao" class="alma.scheduling.datamodel.weather.dao.WeatherStationDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="atmDao"
		class="alma.scheduling.datamodel.weather.dao.AtmParametersDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="obsProjectDao"
		class="alma.scheduling.datamodel.obsproject.dao.ObsProjectDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="sourceDao"
		class="alma.scheduling.datamodel.obsproject.dao.FieldSourceDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean name="observationDao"
    	class="alma.scheduling.datamodel.observation.dao.ObservationDaoImpl"
    	scope="singleton">
    	<property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean name="opacityInterpolator" 
    	class="alma.scheduling.weather.OpacityInterpolatorImpl"
    	scope="singleton"/>
    
<!-- XML DAO Beans -->
	<bean id="configDao"
		class="alma.scheduling.datamodel.config.dao.ConfigurationDaoImpl" />
	<bean id="xmlExecDao"
		class="alma.scheduling.datamodel.executive.dao.XmlExecutiveDaoImpl">
		<property name="configDao" ref="configDao" />
	</bean>
	<bean id="xmlObsProjectDao"
		class="alma.scheduling.datamodel.obsproject.dao.XmlObsProjectDaoImpl">
		<property name="configurationDao" ref="configDao" />
	</bean>
	<bean id="xmlObservatoryDao"
		class="alma.scheduling.datamodel.observatory.dao.XmlObservatoryDaoImpl">
		<property name="configurationDao" ref="configDao" />
	</bean>
	<bean id="observatoryDao"
		class="alma.scheduling.datamodel.observatory.dao.ObservatoryDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="execBlockDao" 
		class="alma.scheduling.datamodel.observation.dao.ObservationDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- Archive/XMLStore Data Loader -->
 	<bean id="archProjectDao"
		class="alma.scheduling.datamodel.obsproject.dao.Phase1XMLStoreProjectDao"
		scope="prototype">
	</bean>

<!-- DataLoaders Beans -->
	<bean id="dataLinker" class="alma.scheduling.dataload.DataLinker">
		<property name="sbDao" ref="sbDao" />
		<property name="execDao" ref="execDao" />
		<property name="configDao" ref="configDao" />
		<property name="obsPrjDao" ref="obsProjectDao" />
	</bean>
	
	<bean id="obsProjectDataLoader" class="alma.scheduling.dataload.obsproject.XmlObsProjectDataLoaderImpl"
	scope="singleton">
		<property name="xmlDao" ref="xmlObsProjectDao" />
		<property name="dao" ref="obsProjectDao" />
	</bean> 
	
	<bean id="AlmaArchiveObsProjectDataLoader" class="alma.scheduling.dataload.obsproject.AlmaArchiveObsProjectLoaderImpl"
	scope="singleton">
		<property name="archiveProjectDao" ref="archProjectDao"/>
		<property name="dao" ref="obsProjectDao" />
	</bean>
	
	<bean id="dataCleaner" class="alma.scheduling.dataload.CompositeDataLoader"
		scope="singleton">
		<property name="loaders">
			<list>
				<bean class="alma.scheduling.dataload.ObsProjectMutableDataLoader" scope="singleton">
					<property name="obsProjectDao" ref="obsProjectDao"/>
				</bean>
				<bean class="alma.scheduling.dataload.ExecutiveMutableDataLoader" scope="singleton">
					<property name="execDao" ref="execDao"/>
				</bean>
				<bean class="alma.scheduling.dataload.ObservationTablesCleaner" scope="singleton">
					<property name="sessionFactory" ref="sessionFactory"/>
				</bean>
			</list>
		</property>
	</bean>
	
	<bean id="immutableDataLoader" class="alma.scheduling.dataload.CompositeDataLoader" 
		scope="singleton" >
		<property name="loaders">
			<list>
				<ref bean="obsProjectDataLoader"/>
				<bean class="alma.scheduling.dataload.ExecutiveDataLoader">
					<property name="dbDao" ref="execDao" />
					<property name="xmlDao" ref="xmlExecDao" />
				</bean>
				<bean class="alma.scheduling.dataload.observatory.ObservatoryDataLoader">
					<property name="dao" ref="observatoryDao" />
					<property name="xmlDao" ref="xmlObservatoryDao" />
				</bean>
				<ref bean="dataLinker" />
			</list>
		</property>
	</bean>
	
	<bean id="AlmaArchiveFullDataLoader" class="alma.scheduling.dataload.CompositeDataLoader"
	scope="singleton">
		<property name="loaders">
			<list>
				<ref bean="AlmaArchiveObsProjectDataLoader"/>
				<bean class="alma.scheduling.dataload.ExecutiveDataLoader">
					<property name="dbDao" ref="execDao" />
					<property name="xmlDao" ref="xmlExecDao" />
				</bean>
				<bean class="alma.scheduling.dataload.observatory.ObservatoryDataLoader">
					<property name="dao" ref="observatoryDao" />
					<property name="xmlDao" ref="xmlObservatoryDao" />
				</bean>
				<ref bean="dataLinker" />
			</list>
		</property>
	</bean>
	
	<bean id="fullDataUnloader"
		class="alma.scheduling.dataload.obsproject.ObsProjectDataUnloader">
		<property name="xmlDao" ref="xmlObsProjectDao" />
		<property name="dao" ref="obsProjectDao" />
	</bean>

</beans>
