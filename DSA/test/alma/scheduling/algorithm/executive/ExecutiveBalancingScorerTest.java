package alma.scheduling.algorithm.executive;

import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import alma.scheduling.algorithm.sbranking.SBRank;
import alma.scheduling.datamodel.executive.Executive;
import alma.scheduling.datamodel.executive.InvestigatorTAssociatedExecType;
import alma.scheduling.datamodel.observatory.ArrayConfiguration;
import alma.scheduling.datamodel.obsproject.SchedBlock;
import junit.framework.TestCase;

/**
 * The class <code>ExecutiveBalancingScorerTest</code> contains tests for the
 * class {@link <code>ExecutiveBalancingScorer</code>}
 *
 * @pattern JUnit Test Case
 *
 * @generatedBy CodePro at 7/24/12 9:25 PM
 *
 * @author javarias
 *
 */
public class ExecutiveBalancingScorerTest extends TestCase {

	
	/**
	 * Construct new test instance
	 *
	 * @param name the test name
	 */
	public ExecutiveBalancingScorerTest(String name) {
		super(name);
	}

	/**
	 * Perform pre-test initialization
	 *
	 * @throws Exception
	 *
	 * @see TestCase#setUp()
	 */
	protected void setUp() throws Exception {
		super.setUp();
		// Add additional set up code here
	}

	/**
	 * Run the List<SBRank> rank(List<SchedBlock>, ArrayConfiguration, Date,
	 * int) method test
	 */
	public void testRank()
	{
		List<SchedBlock> sbs = createSBs();
		ArrayConfiguration arrConf = new ArrayConfiguration();
		arrConf.setId(0L);
		ExecutiveBalancingScorer scorer = new  ExecutiveBalancingScorer("Executive balancing scorer");
		TreeMap<String, Double> chance = new TreeMap<String, Double>();
		@SuppressWarnings("rawtypes")
		Enumeration e = InvestigatorTAssociatedExecType.enumerate();
		while(e.hasMoreElements()) {
			InvestigatorTAssociatedExecType apdmExec = (InvestigatorTAssociatedExecType) e.nextElement();
			if (apdmExec.toString().equals("NA")) {
				chance.put("NA", 45.0);
			} else if (apdmExec.toString().equals("CL")) {
				chance.put("CL", 10.0);
			} else if (apdmExec.toString().equals("EU")) {
				chance.put("EU", 25.0);
			} else if (apdmExec.toString().equals("EA")) {
				chance.put("EA", 10.0);
			} else if (apdmExec.toString().equals("OTHER")) {
				chance.put("OTHER", 5.0);
			} else if (apdmExec.toString().equals("NA_EA")) {
				chance.put("NA_EA", 5.0);
			} else {
				System.out.println("Unknown Exec: " + apdmExec.toString());
				assertTrue(false);
			}
		}
		scorer.setExecBalance(chance);
		ArrayList<List<SBRank>> res = new ArrayList<List<SBRank>>();
		for (int i = 0; i < 10000; i++){
			res.add(scorer.rank(sbs, arrConf, new Date(), sbs.size()));
		}
		Map<String, Double> stats = getStats(res);
		assertEquals(45.0, stats.get("NA"), 1.0);
		assertEquals(10.0, stats.get("CL"), 1.0);
		assertEquals(25.0, stats.get("EU"), 1.0);
		assertEquals(10.0, stats.get("EA"), 1.0);
		assertEquals(5.0, stats.get("OTHER"), 1.0);
		assertEquals(5.0, stats.get("NA_EA"), 1.0);
	}
	
	private List<SchedBlock> createSBs() {
		ArrayList<SchedBlock> sbs = new ArrayList<SchedBlock>();
		Map<String, Executive> execs = createExecs();
		for(Executive e: execs.values()) {
			SchedBlock sb = new SchedBlock();
			sb.setExecutive(e);
			sb.setUid(e.getName());
			sbs.add(sb);
		}
		return sbs;
	}
	
	private Map<String, Executive> createExecs() {
		TreeMap<String, Executive> execs = new TreeMap<String, Executive>();
		@SuppressWarnings("rawtypes")
		Enumeration e = InvestigatorTAssociatedExecType.enumerate();
		while(e.hasMoreElements()) {
			InvestigatorTAssociatedExecType apdmExec = (InvestigatorTAssociatedExecType) e.nextElement();
			Executive exec = new Executive();
			exec.setName(apdmExec.toString());
			execs.put(apdmExec.toString(), exec);
		}
		return execs;
	}
	
	private Map<String, Double> getStats(List<List<SBRank>> results) {
		TreeMap<String, Double> stats = new TreeMap<String, Double>();
		stats.put("NA", 0.0);
		stats.put("CL", 0.0);
		stats.put("EU", 0.0);
		stats.put("EA", 0.0);
		stats.put("OTHER", 0.0);
		stats.put("NA_EA", 0.0);
		int total = 0;
		for(List<SBRank> lr: results) {
			for(SBRank r: lr) {
				if (r.getRank() > 0.0) {
					stats.put(r.getUid(), stats.get(r.getUid()) + 1);
					total++;
				}
			}
		}
		for(String execId: stats.keySet()) {
			stats.put(execId, stats.get(execId) / (double)total * 100.0);
		}
		return stats;
	}
}

/*$CPS$ This comment was generated by CodePro. Do not edit it.
 * patternId = com.instantiations.assist.eclipse.pattern.testCasePattern
 * strategyId = com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
 * additionalTestNames = 
 * assertTrue = false
 * callTestMethod = true
 * createMain = false
 * createSetUp = true
 * createTearDown = false
 * createTestFixture = false
 * createTestStubs = false
 * methods = rank(QList<QSchedBlock;>;!QArrayConfiguration;!QDate;!I)
 * package = alma.scheduling.algorithm.executive
 * package.sourceFolder = DSA/test
 * superclassType = junit.framework.TestCase
 * testCase = ExecutiveBalancingScorerTest
 * testClassType = alma.scheduling.algorithm.executive.ExecutiveBalancingScorer
 */